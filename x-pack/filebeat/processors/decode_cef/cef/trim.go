//line trim.rl:1
// Code generated by ragel DO NOT EDIT.
package cef

//"os"

//line trim.go:13
var _trim_eof_actions []byte = []byte{
	0, 1,
}

const trim_start int = 1
const trim_first_final int = 1
const trim_error int = 0

const trim_en_main int = 1

//line trim.rl:15

func trimTrailingSpace(data string) string {
	n := len(data)
	if n == 0 {
		return data
	}
	cs, p, pe, eof, last := 0, n-1, -1, -1, n

//line trim.go:36
	{
		(cs) = trim_start
	}

//line trim.go:41
	{
		if (p) == (pe) {
			goto _test_eof
		}
		if (cs) == 0 {
			goto _out
		}
	_resume:
		switch cs {
		case 1:
			if data[(p)] == 32 {
				goto tr1
			}
			if 9 <= data[(p)] && data[(p)] <= 13 {
				goto tr1
			}
			goto tr0
		case 0:
			goto _out
		}

	tr0:
		(cs) = 0
		goto f1
	tr1:
		(cs) = 1
		goto f2

	f2:
//line trim.rl:25

		//fmt.Fprintf(os.Stderr, "XXX: Match at %d (%c): '%s'\n", p, cs, data[p:])
		p -= 2

		goto _again
	f1:
//line trim.rl:29

		//fmt.Fprintf(os.Stderr, "XXX: Error at %d (%c): '%s'\n", p, cs, data[p:])
		last = p + 1

		goto _again

	_again:
		if (cs) == 0 {
			goto _out
		}
		if (p)++; (p) != (pe) {
			goto _resume
		}
	_test_eof:
		{
		}
		if (p) == eof {
			switch _trim_eof_actions[(cs)] {
			case 1:
//line trim.rl:33

				//fmt.Fprintf(os.Stderr, "XXX: EOF at %d (%c)\n", p, cs)
				last = 0

//line trim.go:97
			}
		}

	_out:
		{
		}
	}

//line trim.rl:43

	return data[:last]
}
