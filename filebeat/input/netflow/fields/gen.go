// +build ignore

package main

import (
	"encoding/csv"
	"flag"
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"
)

var (
	outputFile = flag.String("output", "zfields_ipfix.go", "Output file")
	name       = flag.String("name", "fields", "Fields name")
)

const fileHeader = `// go run gen.go
// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT.

package fields

`

func write(w io.Writer, msg string) {
	if _, err := w.Write([]byte(msg)); err != nil {
		fmt.Fprintf(os.Stderr, "Failed writting to %s: %v\n", *outputFile, err)
		os.Exit(4)
	}
}

func usage() {
	fmt.Fprintf(os.Stderr, "Usage: gen [-output file.go] [-name name] <input.csv>\n")
	flag.PrintDefaults()
	os.Exit(1)
}

func main() {
	flag.Usage = usage
	flag.Parse()
	if len(flag.Args()) == 0 {
		fmt.Fprintf(os.Stderr, "No CSV file to parse provided\n")
		usage()
	}
	csvFile := flag.Args()[0]
	if len(csvFile) == 0 {
		fmt.Fprintf(os.Stderr, "Argument -input is required\n")
		os.Exit(2)
	}
	fHandle, err := os.Open(csvFile)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to open %s: %v\n", csvFile, err)
		os.Exit(2)
	}
	defer fHandle.Close()

	outHandle, err := os.Create(*outputFile)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to create %s: %v\n", *outputFile, err)
		os.Exit(3)
	}
	defer outHandle.Close()

	write(outHandle, fileHeader)
	write(outHandle, fmt.Sprintf("var %s = map[FieldKey]Field {\n", *name))

	reader := csv.NewReader(fHandle)
	for lineNum := 1; ; lineNum++ {
		record, err := reader.Read()
		if err != nil {
			if err == io.EOF {
				break
			}
			fmt.Fprintf(os.Stderr, "read of %s failed: %v\n", csvFile, err)
			os.Exit(5)
		}
		if lineNum == 1 {
			continue
		}
		if n := len(record); n != 12 {
			fmt.Fprintf(os.Stderr, "read of %s failed: record len is %d, not 12\n", csvFile, n)
			os.Exit(3)
		}
		idS, name, dataType := record[0], record[1], record[2]
		if len(dataType) == 0 {
			continue
		}
		id, err := strconv.Atoi(idS)
		if err != nil {
			fmt.Fprintf(os.Stderr, "read of %s failed: field ID '%s' is not convertible to an integer\n", csvFile, idS)
			os.Exit(3)
		}
		write(outHandle, fmt.Sprintf("\tFieldKey{FieldID:%d}: {Key:FieldKey{FieldID:%d}, Name: \"%s\", Decoder: %s},\n",
			id, id, name, strings.Title(dataType)))
	}
	write(outHandle, "}\n")
}
